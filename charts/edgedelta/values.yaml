# Default values for edgedelta.

# Use either apiKey or secretApiKey.value but NOT both to provide API Key to Agent
apiKey: ""

secretApiKey:
  name: "ed-api-key"
  key: "ed-api-key"
  value: ""

# Predefined environment variables
# See: https://docs.edgedelta.com/installation/environment-variables

storePort: ""
dataPort: ""
profilerPort: ""
promPort: ""
httpProxy: ""
httpsProxy: ""
noProxy: ""
edBackendDisabled: ""
edTagOverride: ""
edSuppressionMode: ""
edSkipConfDownload: ""
edWorkflows: ""
edWorkflowPrefixes: ""
edDisableLeaderElection: ""
edTraceFiles: ""
edSkipTlsVerify: ""
edConfigContent: ""
goMemLimit: ""

edEnableControllerDiscovery: true

# custom tags are comma separated key:val pairs. these are going to be attached to all outgoing data from agent to configured destination(s).
edCustomTags: ""

# Persisting Cursor props constraints
persistingCursorProps:
  enabled: false
  hostMountPath: "/var/lib/edgedelta"
  containerMountPath: "/var/lib/edgedelta"

# Docker container properties
dockerContainerProps:
  hostPath: "/var/lib/docker/containers"

# Aggregator agent mode properties
# Agents are deployed as daemonset. an extra aggregator agent is deployed to collect/aggregate metrics
aggregatorProps:
  enabled: false
  port: 9191
  # serviceDNSSuffix is "svc.cluster.local" by default. It's used to construct endpoint for aggregator agent service so that processor agents can communicate with aggregator.
  # Final endpoint looks like this: http://ed-aggregator-svc.my-namespace.svc.cluster.local:9191
  serviceDNSSuffix: "svc.cluster.local"
  # aggregator agent needs a small amount of disk space to persist some internal source related information to be able to work smoothly after restarts/upgrades.
  # If your k8s cluster has specific storage classes you can set storageClassName accordingly.
  storageClassName: ""
  goMemLimit: ""

  resources:
    limits:
      memory: 2048Mi
    requests:
      cpu: 200m
      memory: 256Mi

archiverProps:
  enabled: false
  port: 9292
  # Final archiver endpoint looks like this: http://ed-archiver-svc.my-namespace.dns-suffix:9292
  storageClassName: ""
  diskSize: 10Gi
  goMemLimit: ""

  resources:
    limits:
      memory: 2048Mi
    requests:
      cpu: 200m
      memory: 256Mi

# HttpRecorder is a frontend layer which can consume logs with both http and tcp protocols
# It is deployed as a sidecar for each ED agent. It dumps the incoming logs to filesystem (persisted via PVC) and agents grab from there.
httpRecorderProps:
  enabled: false
  image: gcr.io/edgedelta/httprecorder:latest
  port: 8080

  # Enable ingress if the k8s cluster already has nginx + cert-manager installed
  # Without ingress enabled you can directly send logs within cluster using http://ed-httprecorder-svc.{namespace}.svc.cluster.local:8080
  ingress:
    enabled: false
    host: ""
    class: nginx

# Custom labels:

# labels:
#   sample-label-key: sample-label-value

# Custom environment variables:

# envs:
#  - name: sample-var
#    value: sample-value

# Custom secret environment variables:
# Use only lowercase alphabetic and - characters in secretKeyRef name and key fields, otherwise helm deploys the release but throws an obscure error about DNS-1123 subdomain format

# secrets:
#  - name: sampleSecretVar
#    secretKeyRef:
#      name: sample-k8-secret-name
#      key: sample-k8s-secret-subkey

# Create secrets with below command:
# kubectl create secret generic sample-k8-secret-name --namespace=edgedelta --from-literal=sample-k8s-secret-subkey="SECRET_VALUE"

# Configure the deployment type
deployment:
  # Can be either Deployment or DaemonSet
  kind: DaemonSet
  # Number of pods of the deployment (only applies when kind == Deployment)
  replicas: 1

# Resource constraints

annotations: {}
resources:
  limits:
    memory: 2048Mi
  requests:
    cpu: 200m
    memory: 256Mi

tolerations: {}
nodeSelector: {}
priorityClassName: ""

updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1

# Helm overrides

image:
  name: gcr.io/edgedelta/agent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
  # Overrides full image (with url and version/tag) if not empty
  # example: gcr.io/edgedelta/agent@sha256:0180ff40f52528d7462200c40fae8aff3bdb83289ac19ce823a3fcb1c40c9ad9
  fullPath: ""
imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

# Manage NetworkPolicy
networkPolicy:
  # networkPolicy.create -- If true, create NetworkPolicy for DaemonSet
  enabled: false
  # networkPolicy.type -- Type of the network policy to use.
  # Can be:
  # * cilium     for cilium.io/v2/CiliumNetworkPolicy
  type: cilium
  cilium:
    # networkPolicy.cilium.dnsSelector -- Cilium selector of the DNSâ€¯server entity
    # @default -- kube-dns in namespace kube-system
    dnsSelector:
      toEndpoints:
        - matchLabels:
            "k8s:io.kubernetes.pod.namespace": kube-system
            "k8s:k8s-app": kube-dns

    # networkPolicy.cilium.customEndpoints -- Custom endpoint addresses for egress traffic
    #
    # customEndpoints:
    #   toFQDNs:
    #     - matchName: "api.edgedelta.com"
    #     - matchPattern: "*.s3.us-east-1.amazonaws.com"
    #   toCIDR:
    #     - 192.168.1.0/24
    #   toServices:
    #     - k8sService:
    #         namespace: default
    #         serviceName: customservice
    #   toPorts:
    #     - ports:
    #         - port: "443"
    #           protocol: TCP

# enable service monitor to scrape prometheus metrics from agents
serviceMonitor:
  enabled: false
  #   namespace: monitoring
  #   scrapeTimeout: 10s
  #   jobLabel: edgedelta
  #   selector:
  #     release: prom-kube-stack

# agent troubleshooter is to verify health of agent after deployment
# command to run the troubleshooter is displayed as the output of
# helm install command
agentTroubleshooter: 
  image: gcr.io/edgedelta/agent-troubleshooter:latest

instructionURL: "https://app.edgedelta.com"
# Default values for edgedelta.

# Use either apiKey or secretApiKey but NOT both to provide API Key to Agent:
apiKey: ""

# secretApiKey:
#   name: "ed-api-key"
#   key: "ed-api-key"

# Create secret api key command:
# kubectl create secret generic ed-api-key --namespace=edgedelta --from-literal=ed-api-key="YOUR_API_KEY"

# Predefined environment variables
# See: https://docs.edgedelta.com/installation/environment-variables

storePort: ""
httpProxy: ""
httpsProxy: ""
noProxy: ""
edBackendDisabled: ""
edTagOverride: ""
edSuppressionMode: ""
edSkipConfDownload: ""
edWorkflows: ""
edWorkflowPrefixes: ""
edDisableLeaderElection: ""
edTraceFiles: ""

# Persisting Cursor props constraints
persistingCursorProps:
  enabled: false
  hostMountPath: "/var/lib/edgedelta"
  containerMountPath: "/var/lib/edgedelta"

# Aggregator agent mode properties
# Agents are deployed as daemonset. an extra aggregator agent is deployed to collect/aggregate metrics
aggregatorProps: 
  enabled: false
  port: 9191

# HttpRecorder is a frontend layer which can consume logs with both http and tcp protocols
# It is deployed as a sidecar for each ED agent. It dumps the incoming logs to filesystem (persisted via PVC) and agents grab from there.
httpRecorderProps:
  enabled: false
  image: gcr.io/edgedelta/httprecorder:latest
  port: 8080

  # Enable ingress if the k8s cluster already has nginx + cert-manager installed
  # Without ingress enabled you can directly send logs within cluster using http://ed-httprecorder-svc.{namespace}.svc.cluster.local:8080
  ingress:
    enabled: false
    host: ""
    class: nginx

# Custom environment variables:

# envs:
#  - name: sample-var
#    value: sample-value

# Custom secret environment variables:
# Use only lowercase alphabetic and - characters in secretKeyRef name and key fields, otherwise helm deploys the release but throws an obscure error about DNS-1123 subdomain format

# secrets:
#  - name: sampleSecretVar
#    secretKeyRef:
#      name: sample-k8-secret-name
#      key: sample-k8s-secret-subkey

# Create secrets with below command:
# kubectl create secret generic sample-k8-secret-name --namespace=edgedelta --from-literal=sample-k8s-secret-subkey="SECRET_VALUE"

# Resource constraints

annotations: {}
resources:
  limits:
    memory: 2048Mi
  requests:
    cpu: 200m
    memory: 256Mi

# Helm overrides

image:
  name: gcr.io/edgedelta/agent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

nameOverride: ""
fullnameOverride: ""
